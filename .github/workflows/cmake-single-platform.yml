# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  linux-x86_64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install prerequisites
        run: >-
          sudo apt-get update

          sudo apt-get install -y
          cmake
          qtbase5-dev 
          qtchooser 
          qt5-qmake 
          qtbase5-dev-tools
          curl
          curl-dev

        # build-essential
        # flex
        # bison
        # libelf-dev
        # libusb-dev
        # libusb-1.0-0-dev
        # libhidapi-dev
        # libftdi1-dev
        # libreadline-dev
        # texinfo
        # texlive
        # texi2html
      - name: Configure
        run: >-
          cmake
          -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          -B build
        # -D BUILD_DOC=1
        # -D DEBUG_CMAKE=1
        # -D HAVE_LINUXGPIO=1
        # -D HAVE_LINUXSPI=1
      - name: Build
        run: cmake --build build
      - name: Archive build artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: build-linux-x86_64
          path: |
            build/
            !**/*.d
            !**/*.o
      - name: Archive executables
        uses: actions/upload-artifact@v3
        with:
          name: next-linux-x86_64
          path: |
            next
          # build/src/avrdude
          # build/src/avrdude.conf
######################################################################################################
#
#  linux:
#    runs-on: ubuntu-latest
#    container: debian:11
#    strategy:
#      matrix:
#        include:
#          - { arch: i386, processor: i686, prefix: i686-linux-gnu, inc-lib: i386-linux-gnu }
#          - { arch: armhf, processor: armhf, prefix: arm-linux-gnueabihf, inc-lib: arm-linux-gnueabihf }
#          - { arch: arm64, processor: aarch64, prefix: aarch64-linux-gnu, inc-lib: aarch64-linux-gnu }
#    steps:
#      - uses: actions/checkout@v3
#      - name: Add architecture
#        run: |
#          dpkg --add-architecture ${{matrix.arch}}
#          apt-get update
#      - name: Install prerequisites
#        run: >-
#          apt-get update
#
#          apt-get install -y
#          git
#          cmake
#          clang 
#          gcc
#          qtbase5-dev 
#          qtchooser 
#          qt5-qmake 
#          qtbase5-dev-tools
#          crossbuild-essential-${{matrix.arch}}
#          libelf-dev:${{matrix.arch}}
#          libusb-dev:${{matrix.arch}}
#          libusb-1.0-0-dev:${{matrix.arch}}
#          libhidapi-dev:${{matrix.arch}}
#          libftdi1-dev:${{matrix.arch}}
#          libreadline-dev:${{matrix.arch}}
#        # bison
#        # flex
#      - name: Configure
#        run: >-
#          cmake
#          -B build
#          -D DEBUG_CMAKE=1
#          -D HAVE_LINUXGPIO=1
#          -D HAVE_LINUXSPI=1
#          -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#          -D CMAKE_SYSTEM_NAME=Linux
#          -D CMAKE_SYSTEM_PROCESSOR=${{matrix.processor}}
#          -D CMAKE_C_COMPILER=${{matrix.prefix}}-gcc
#          -D CMAKE_C_COMPILER=${{matrix.prefix}}-ar
#          -D CMAKE_FIND_ROOT_PATH=/usr/${{matrix.prefix}}
#          -D CMAKE_INCLUDE_PATH=/usr/include/${{matrix.inc-lib}}
#          -D CMAKE_LIBRARY_PATH=/usr/lib/${{matrix.inc-lib}}
#      - name: Build
#        run: cmake --build build
#      - name: Archive build artifacts
#        if: always()
#        uses: actions/upload-artifact@v3
#        with:
#          name: build-linux-${{matrix.processor}}
#          path: |
#            build/
#            !**/*.d
#            !**/*.o
#      - name: Archive executables
#        uses: actions/upload-artifact@v3
#        with:
#          name: next-linux-${{matrix.processor}}
#          path: |
#            next
#          # build/src/avrdude
#          # build/src/avrdude.conf
#
#############################################################################
#  macos-x86_64:
#    runs-on: macos-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Install prerequisites
#        run: >-
#          # brew update
#
#          brew install
#          cmake
#          qtbase5-dev 
#          qtchooser 
#          qt5-qmake 
#          qtbase5-dev-tools
#        # flex
#        # bison
#        # libelf
#        # libusb
#        # hidapi
#        # libftdi
#        # readline
#      - name: Configure
#        run: >-
#          cmake
#          -B build
#          -D CMAKE_C_FLAGS=-I/usr/local/include
#          -D CMAKE_EXE_LINKER_FLAGS=-L/usr/local/Cellar
#          -D DEBUG_CMAKE=1
#          -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#      - name: Build
#        run: cmake --build build
#      - name: Archive build artifacts
#        if: always()
#        uses: actions/upload-artifact@v3
#        with:
#          name: build-macos-x86_64
#          path: |
#            build/
#            !**/*.d
#            !**/*.o
#      - name: Archive executables
#        uses: actions/upload-artifact@v3
#        with:
#          name: next-macos-x86_64
#          path: |
#            next
#          # build/src/avrdude
#          # build/src/avrdude.conf
#
########################################################################################33
#  msvc:
#    runs-on: windows-latest
#    strategy:
#      matrix:
#        include:
#          - { arch: x64, platform: x64 }
#    steps:
#      - uses: actions/checkout@v3
#      - name: Install prerequisites
#        # As Chocolatey is notoriously unreliable, install winflexbison3 directly from GitHub.
#        # run: choco install winflexbison3
#        run: |
#          curl https://github.com/lexxmark/winflexbison/releases/download/v2.5.24/win_flex_bison-2.5.24.zip --location --output winflexbison.zip
#          unzip winflexbison.zip -d ${{github.workspace}}\winflexbison
#          echo "${{github.workspace}}\winflexbison" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
#      - name: Configure
#        run: >-
#          cmake
#          -A ${{matrix.platform}}
#          -B build
#          -D DEBUG_CMAKE=1
#          -D CMAKE_SYSTEM_VERSION=11
#          -D CMAKE_C_FLAGS_RELWITHDEBINFO="/MT /GL /Zi /O2 /Ob1 /DNDEBUG"
#          -D CMAKE_CXX_FLAGS_RELWITHDEBINFO="/MT /GL /Zi /O2 /Ob1 /DNDEBUG"
#          -D CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO="/DEBUG /INCREMENTAL:NO /LTCG /OPT:REF /OPT:ICF"
#          -D HAVE_LIBREADLINE=HAVE_LIBREADLINE-NOTFOUND
#          -D USE_EXTERNAL_LIBS=1
#      - name: Build
#        run: cmake --build build --config ${{env.BUILD_TYPE}}
#      - name: Archive build artifacts
#        if: always()
#        uses: actions/upload-artifact@v3
#        with:
#          name: build-msvc-${{matrix.arch}}
#          path: |
#            build/
#            !**/_deps/
#            !**/*.obj
#      - name: Move executables
#        run: |
#          exho ""
#        # mv build/src/RelWithDebInfo/avrdude.exe build/src
#        # mv build/src/RelWithDebInfo/avrdude.pdb build/src
#      - name: Archive executables
#        uses: actions/upload-artifact@v3
#        with:
#          name: next-msvc-${{matrix.arch}}
#          path: |
#            next
#          # build/src/avrdude.exe
#          # build/src/avrdude.pdb
#          # build/src/avrdude.conf
#
#####################################################################################################333
  mingw:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      matrix:
        include:
          - { sys: mingw64, env: x86_64 }
    steps:
      - uses: actions/checkout@v3
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          install: >-
            make
            mingw-w64-x86_64-qt-creator
            mingw-w64-x86_64-clang 
            mingw-w64-i686-clang
            mingw-w64-x86_64-toolchain
            mingw-w64-${{matrix.env}}-gcc
            mingw-w64-${{matrix.env}}-cmake
            mingw-w64-${{matrix.env}}-libelf
            mingw-w64-${{matrix.env}}-libusb
            mingw-w64-${{matrix.env}}-libusb-compat-git
            mingw-w64-${{matrix.env}}-hidapi
            mingw-w64-${{matrix.env}}-libftdi
          # base-devel
          # qtbase5-dev 
          # qtchooser 
          # qt5-qmake 
          # qtbase5-dev-tools
      - name: Configure
        run: >-
          cmake
          -G"MSYS Makefiles"
          -D DEBUG_CMAKE=1
          -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          -B build
        # -D CMAKE_AR=mingw-w64-${{matrix.env}}-lib
        # -D CMAKE_C_COMPILER=mingw-w64-${{matrix.env}}-clang
        # -D CMAKE_CXX_COMPILER=mingw-w64-${{matrix.env}}-clang++
      - name: Build
        run: cmake --build build
      - name: Archive build artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: build-mingw-${{matrix.env}}
          path: |
            build/
      - name: Archive executables
        uses: actions/upload-artifact@v3
        with:
          name: next-mingw-${{matrix.env}}
          path: |
            next
          # build/src/avrdude.exe
          # build/src/avrdude.conf
